import java.awt.*;
import java.awt.image.*;
import java.util.*;

/**
 * Region growing algorithm: finds and holds regions in an image.
 * Each region is a list of contiguous points with colors similar to a target color.
 * Scaffold for PS-1, Dartmouth CS 10, Fall 2016
 * 
 * @author Chris Bailey-Kellogg, Winter 2014 (based on a very different structure from Fall 2012)
 * @author Travis W. Peters, Dartmouth CS 10, Updated Winter 2015
 * @author CBK, Spring 2015, updated for CamPaint
 */
public class RegionFinder {
	private static final int maxColorDiff = 1000;				// how similar a pixel color must be to the target color, to belong to a region
	private static final int minRegion = 50; 				// how many points in a region to be worth considering
	private static final int radius = 4;

	private BufferedImage image;                            // the image in which to find regions
	private BufferedImage recoloredImage;                   // the image with identified regions recolored

	private ArrayList<ArrayList<Point>> regions;			// a region is a list of points
															// so the identified regions are in a list of lists of points


	public RegionFinder() {
		this.image = null;
	}

	public RegionFinder(BufferedImage image) {
		this.image = image;		
	}

	public void setImage(BufferedImage image) {
		this.image = image;
	}

	public BufferedImage getImage() {
		return image;
	}

	public BufferedImage getRecoloredImage() {
		return recoloredImage;
	}

	/**
	 * Sets regions to the flood-fill regions in the image, similar enough to the c2.
	 */
	public void findRegions(Color targetColor) {
		// TODO: YOUR CODE HERE
		
		BufferedImage visited = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
		regions = new ArrayList<ArrayList<Point>>();
		// set to all black
		
		
		for (int y = 0; y < image.getHeight(); y++) {
			for (int x = 0; x < image.getWidth(); x++) {
				

				Color c = new Color(image.getRGB(x, y));
				if (colorMatch(targetColor, c) && (visited.getRGB(x,y) == 0)) {	
					
					ArrayList<Point> toVist = new ArrayList<Point>();
			
					toVist.add(new Point(x,y));
					
					ArrayList<Point> region = new ArrayList<Point>();
					
					while (!toVist.isEmpty()) { 
						Point CurrentPoint = toVist.remove(toVist.size()-1);
						region.add(CurrentPoint);

						visited.setRGB((int)CurrentPoint.getX(),(int)CurrentPoint.getY(), 1);
						
						for (int ny = Math.max(0, (int) CurrentPoint.getY() - radius); 
								ny < Math.min(image.getHeight(), CurrentPoint.getY() + radius); 
								ny++) {
							for (int nx = Math.max(0, (int) CurrentPoint.getX() - radius); 
									nx < Math.min(image.getWidth(), CurrentPoint.getX() + radius);
									nx++) {
								
								Color nc = new Color(image.getRGB(nx, ny));
								
								if (colorMatch(targetColor, nc) && (visited.getRGB(nx,ny) == 0)){
									toVist.add(new Point(nx,ny));
									visited.setRGB(nx, ny, 1);
		
									
									
								}	
							}
				
							}
					}

					if (region.size() >= minRegion) {
						regions.add(region);

				}
					}
					

				}
			}

		}

							
	


 
	/**
	 * Tests whether the two colors are "similar enough" (your definition, subject to the maxColorDiff threshold, which you can vary).
	 */
	private static boolean colorMatch(Color c1, Color c2) {
		// TODO: YOUR CODE HERE
		int d = (c1.getRed() - c2.getRed()) * (c1.getRed() - c2.getRed())
				+ (c1.getGreen() - c2.getGreen()) * (c1.getGreen() - c2.getGreen())
				+ (c1.getBlue() - c2.getBlue()) * (c1.getBlue() - c2.getBlue());
		
		if (d < maxColorDiff) {
			return true;
		}
		else {
			return false;
		}
		
	}


	/**
	 * Returns the largest region detected (if any region has been detected)
	 */
	public ArrayList<Point> largestRegion() {
		// TODO: YOUR CODE HERE
		ArrayList<Point> largestRegion = null; 
		
		if (!regions.isEmpty()) {
			largestRegion = regions.get(0);
		
		
			for (ArrayList<Point> region: regions ) {
			
				if (region.size() > largestRegion.size()) {
					largestRegion = region;
			}
			}

		}
		return largestRegion;
			
	}
	
		

	/**
	 * Sets recoloredImage to be a copy of image, 
	 * but with each region a uniform random color, 
	 * so we can see where they are
	 */
	public void recolorImage() {
		// First copy the original
		recoloredImage = new BufferedImage(image.getColorModel(), image.copyData(null), image.getColorModel().isAlphaPremultiplied(), null);
		// Now recolor the regions in it
		// TODO: YOUR CODE HERE
		
		for (ArrayList<Point> rg: regions) {
			Color v = new Color((int)(Math.random() * (16777216 + 1)));
			System.out.println(rg);
			
			for (Point pt : rg) {
			
				recoloredImage.setRGB((int)pt.getX(),(int)pt.getY(), v.getRGB());
		
			}
		}
	
	}
}
